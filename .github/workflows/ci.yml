name: CI / CD – SymptomSync

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  formatting:
    name: "🔧 Format & Lint"
    runs-on: ubuntu-latest
    env:
      FMT_LINT_B64: ${{ secrets.SCRIPT_FORMAT_LINT }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Decode & run formatter / linter
        run: |
          echo "$FMT_LINT_B64" | base64 --decode > fmt-lint.sh
          chmod +x fmt-lint.sh
          ./fmt-lint.sh

  testing:
    name: "🧪 Unit & E2E Tests"
    runs-on: ubuntu-latest
    needs: formatting
    env:
      TEST_B64: ${{ secrets.SCRIPT_TEST }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Decode & run tests
        run: |
          echo "$TEST_B64" | base64 --decode > test.sh
          chmod +x test.sh
          ./test.sh

  build:
  name: "🏗 Build Next.js (web/)"
  runs-on: ubuntu-latest
  needs: testing

  env:
    NODE_VERSION: 18
    NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
    NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd web
        npm ci --legacy-peer-deps

    - name: Build Next.js app
      run: |
        cd web
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: next-build
        path: web/.next

  docker:
    name: "🐳 Build & Push Docker Image"
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push SymptomSync image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/symptomsync:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/symptomsync:latest
          build-args: |
            NODE_ENV=production

  deploy:
    name: "🚀 Deploy (AWS CDK + Ansible)"
    runs-on: ubuntu-latest
    needs: docker
    env:
      DEPLOY_B64: ${{ secrets.SCRIPT_DEPLOY }}
      GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Decode & run deploy script
        run: |
          echo "$DEPLOY_B64" | base64 --decode > deploy.sh
          chmod +x deploy.sh
          ./deploy.sh

  complete:
    name: "🎉 Pipeline Complete"
    runs-on: ubuntu-latest
    needs: deploy
    env:
      DONE_B64: ${{ secrets.SCRIPT_COMPLETE }}
    steps:
      - uses: actions/checkout@v4
      - name: Decode & announce
        run: |
          echo "$DONE_B64" | base64 --decode > done.sh
          chmod +x done.sh
          ./done.sh
